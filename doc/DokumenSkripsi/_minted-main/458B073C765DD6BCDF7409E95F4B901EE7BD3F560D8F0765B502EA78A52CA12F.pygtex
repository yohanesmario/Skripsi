\begin{Verbatim}[commandchars=\\\{\},codes={\catcode`\$=3\catcode`\^=7\catcode`\_=8}]
\PYG{k}{using} \PYG{n+nn}{System}\PYG{p}{;}
\PYG{k}{using} \PYG{n+nn}{System.Collections.Generic}\PYG{p}{;}
\PYG{k}{using} \PYG{n+nn}{System.IO}\PYG{p}{;}
\PYG{k}{using} \PYG{n+nn}{System.Linq}\PYG{p}{;}
\PYG{k}{using} \PYG{n+nn}{System.Runtime.Serialization.Json}\PYG{p}{;}
\PYG{k}{using} \PYG{n+nn}{System.Text}\PYG{p}{;}
\PYG{k}{using} \PYG{n+nn}{System.Threading.Tasks}\PYG{p}{;}
\PYG{k}{using} \PYG{n+nn}{System.Xml.Serialization}\PYG{p}{;}
\PYG{k}{using} \PYG{n+nn}{Windows.Security.Credentials}\PYG{p}{;}
\PYG{k}{using} \PYG{n+nn}{Windows.Security.Cryptography}\PYG{p}{;}
\PYG{k}{using} \PYG{n+nn}{Windows.Security.Cryptography.Core}\PYG{p}{;}
\PYG{k}{using} \PYG{n+nn}{Windows.Storage}\PYG{p}{;}
\PYG{k}{using} \PYG{n+nn}{Windows.Storage.Streams}\PYG{p}{;}

\PYG{k}{namespace} \PYG{n+nn}{WiFiWebAutoLogin.Classes} \PYG{p}{\PYGZob{}}
    \PYG{k}{class} \PYG{n+nc}{Storage} \PYG{p}{\PYGZob{}}
        \PYG{k}{private} \PYG{k+kt}{string} \PYG{n}{fileName}\PYG{p}{;}
        \PYG{k}{private} \PYG{k+kt}{string} \PYG{n}{password}\PYG{p}{;}
        \PYG{k}{private} \PYG{n}{LoginInformation} \PYG{n}{loginInfo}\PYG{p}{;}

        \PYG{k}{public} \PYG{n+nf}{Storage}\PYG{p}{(}\PYG{k+kt}{string} \PYG{n}{fileName}\PYG{p}{)} \PYG{p}{\PYGZob{}}
            \PYG{k}{this}\PYG{p}{.}\PYG{n}{fileName} \PYG{p}{=} \PYG{k}{new} \PYG{n}{String}\PYG{p}{(}\PYG{n}{fileName}\PYG{p}{.}\PYG{n}{ToCharArray}\PYG{p}{());}
            \PYG{n}{PasswordVault} \PYG{n}{vault} \PYG{p}{=} \PYG{k}{new} \PYG{n}{PasswordVault}\PYG{p}{();}

            \PYG{k}{try} \PYG{p}{\PYGZob{}}
                \PYG{k}{this}\PYG{p}{.}\PYG{n}{password} \PYG{p}{=} \PYG{n}{vault}\PYG{p}{.}\PYG{n}{Retrieve}\PYG{p}{(}\PYG{n}{Conf}\PYG{p}{.}\PYG{n}{resource}\PYG{p}{,} \PYG{n}{Conf}\PYG{p}{.}\PYG{n}{username}\PYG{p}{).}\PYG{n}{Password}\PYG{p}{;}
            \PYG{p}{\PYGZcb{}}
            \PYG{k}{catch} \PYG{p}{(}\PYG{n}{Exception} \PYG{n}{e}\PYG{p}{)} \PYG{p}{\PYGZob{}}
                \PYG{n}{vault}\PYG{p}{.}\PYG{n}{Add}\PYG{p}{(}\PYG{k}{new} \PYG{n}{PasswordCredential}\PYG{p}{(}\PYG{n}{Conf}\PYG{p}{.}\PYG{n}{resource}\PYG{p}{,} \PYG{n}{Conf}\PYG{p}{.}\PYG{n}{username}\PYG{p}{,} \PYG{n}{CryptographicBuffer}\PYG{p}{.}\PYG{n}{EncodeToBase64String}\PYG{p}{(}\PYG{n}{CryptographicBuffer}\PYG{p}{.}\PYG{n}{GenerateRandom}\PYG{p}{(}\PYG{l+m}{64}\PYG{p}{))));}
                \PYG{k}{this}\PYG{p}{.}\PYG{n}{password} \PYG{p}{=} \PYG{n}{vault}\PYG{p}{.}\PYG{n}{Retrieve}\PYG{p}{(}\PYG{n}{Conf}\PYG{p}{.}\PYG{n}{resource}\PYG{p}{,} \PYG{n}{Conf}\PYG{p}{.}\PYG{n}{username}\PYG{p}{).}\PYG{n}{Password}\PYG{p}{;}
            \PYG{p}{\PYGZcb{}}
        \PYG{p}{\PYGZcb{}}

        \PYG{k}{public} \PYG{k}{async} \PYG{n}{Task} \PYG{n+nf}{setup}\PYG{p}{()} \PYG{p}{\PYGZob{}}
            \PYG{n}{StorageFolder} \PYG{n}{folder} \PYG{p}{=} \PYG{n}{ApplicationData}\PYG{p}{.}\PYG{n}{Current}\PYG{p}{.}\PYG{n}{LocalFolder}\PYG{p}{;}
            \PYG{n}{StorageFile} \PYG{n}{file}\PYG{p}{;}
            \PYG{k}{try} \PYG{p}{\PYGZob{}}
                \PYG{n}{file} \PYG{p}{=} \PYG{k}{await} \PYG{n}{folder}\PYG{p}{.}\PYG{n}{GetFileAsync}\PYG{p}{(}\PYG{k}{this}\PYG{p}{.}\PYG{n}{fileName}\PYG{p}{);}
            \PYG{p}{\PYGZcb{}} \PYG{k}{catch} \PYG{p}{(}\PYG{n}{Exception} \PYG{n}{e}\PYG{p}{)} \PYG{p}{\PYGZob{}}
                \PYG{n}{file} \PYG{p}{=} \PYG{k}{await} \PYG{n}{folder}\PYG{p}{.}\PYG{n}{CreateFileAsync}\PYG{p}{(}\PYG{k}{this}\PYG{p}{.}\PYG{n}{fileName}\PYG{p}{);}
            \PYG{p}{\PYGZcb{}}

            \PYG{n}{IBuffer} \PYG{n}{encryptedJson} \PYG{p}{=} \PYG{k}{await} \PYG{n}{FileIO}\PYG{p}{.}\PYG{n}{ReadBufferAsync}\PYG{p}{(}\PYG{n}{file}\PYG{p}{);}
            \PYG{n}{SymmetricKeyAlgorithmProvider} \PYG{n}{algorithmProvider} \PYG{p}{=} \PYG{n}{SymmetricKeyAlgorithmProvider}\PYG{p}{.}\PYG{n}{OpenAlgorithm}\PYG{p}{(}\PYG{n}{SymmetricAlgorithmNames}\PYG{p}{.}\PYG{n}{AesCbcPkcs7}\PYG{p}{);}
            \PYG{n}{IBuffer} \PYG{n}{bufferedPassword} \PYG{p}{=} \PYG{n}{CryptographicBuffer}\PYG{p}{.}\PYG{n}{ConvertStringToBinary}\PYG{p}{(}\PYG{n}{password}\PYG{p}{,} \PYG{n}{BinaryStringEncoding}\PYG{p}{.}\PYG{n}{Utf8}\PYG{p}{);}
            \PYG{n}{IBuffer} \PYG{n}{decryptedJson} \PYG{p}{=} \PYG{n}{CryptographicEngine}\PYG{p}{.}\PYG{n}{Decrypt}\PYG{p}{(}\PYG{n}{algorithmProvider}\PYG{p}{.}\PYG{n}{CreateSymmetricKey}\PYG{p}{(}\PYG{n}{bufferedPassword}\PYG{p}{),} \PYG{n}{encryptedJson}\PYG{p}{,} \PYG{n}{bufferedPassword}\PYG{p}{);}
            \PYG{n}{DataReader} \PYG{n}{dataReader} \PYG{p}{=} \PYG{n}{Windows}\PYG{p}{.}\PYG{n}{Storage}\PYG{p}{.}\PYG{n}{Streams}\PYG{p}{.}\PYG{n}{DataReader}\PYG{p}{.}\PYG{n}{FromBuffer}\PYG{p}{(}\PYG{n}{decryptedJson}\PYG{p}{);}
            \PYG{k+kt}{string} \PYG{n}{json} \PYG{p}{=} \PYG{n}{dataReader}\PYG{p}{.}\PYG{n}{ReadString}\PYG{p}{(}\PYG{n}{decryptedJson}\PYG{p}{.}\PYG{n}{Length}\PYG{p}{);}

            \PYG{k}{if} \PYG{p}{(}\PYG{n}{json}\PYG{p}{.}\PYG{n}{Trim}\PYG{p}{().}\PYG{n}{Equals}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}\PYGZdq{}}\PYG{p}{))} \PYG{p}{\PYGZob{}}
                \PYG{n}{loginInfo} \PYG{p}{=} \PYG{k}{new} \PYG{n}{LoginInformation}\PYG{p}{();}
                \PYG{k}{this}\PYG{p}{.}\PYG{n}{saveData}\PYG{p}{();}
            \PYG{p}{\PYGZcb{}}
            \PYG{k}{else} \PYG{p}{\PYGZob{}}
                \PYG{n}{DataContractJsonSerializer} \PYG{n}{serializer} \PYG{p}{=} \PYG{k}{new} \PYG{n}{DataContractJsonSerializer}\PYG{p}{(}\PYG{k}{typeof}\PYG{p}{(}\PYG{n}{LoginInformation}\PYG{p}{));}
                \PYG{n}{loginInfo} \PYG{p}{=} \PYG{p}{(}\PYG{n}{LoginInformation}\PYG{p}{)}\PYG{n}{serializer}\PYG{p}{.}\PYG{n}{ReadObject}\PYG{p}{(}\PYG{k}{new} \PYG{n}{MemoryStream}\PYG{p}{(}\PYG{n}{Encoding}\PYG{p}{.}\PYG{n}{Unicode}\PYG{p}{.}\PYG{n}{GetBytes}\PYG{p}{(}\PYG{n}{json}\PYG{p}{)));}
            \PYG{p}{\PYGZcb{}}
        \PYG{p}{\PYGZcb{}}

        \PYG{k}{public} \PYG{n}{LoginInformation} \PYG{n+nf}{getLoginInfo}\PYG{p}{()} \PYG{p}{\PYGZob{}}
            \PYG{k}{return} \PYG{k}{this}\PYG{p}{.}\PYG{n}{loginInfo}\PYG{p}{;}
        \PYG{p}{\PYGZcb{}}

        \PYG{k}{public} \PYG{k}{async} \PYG{k}{void} \PYG{n+nf}{saveData}\PYG{p}{()} \PYG{p}{\PYGZob{}}
            \PYG{n}{DataContractJsonSerializer} \PYG{n}{serializer} \PYG{p}{=} \PYG{k}{new} \PYG{n}{DataContractJsonSerializer}\PYG{p}{(}\PYG{k}{typeof}\PYG{p}{(}\PYG{n}{LoginInformation}\PYG{p}{));}
            \PYG{n}{MemoryStream} \PYG{n}{stream} \PYG{p}{=} \PYG{k}{new} \PYG{n}{MemoryStream}\PYG{p}{();}
            \PYG{n}{serializer}\PYG{p}{.}\PYG{n}{WriteObject}\PYG{p}{(}\PYG{n}{stream}\PYG{p}{,} \PYG{n}{loginInfo}\PYG{p}{);}
            \PYG{n}{stream}\PYG{p}{.}\PYG{n}{Position} \PYG{p}{=} \PYG{l+m}{0}\PYG{p}{;}
            \PYG{n}{StreamReader} \PYG{n}{sr} \PYG{p}{=} \PYG{k}{new} \PYG{n}{StreamReader}\PYG{p}{(}\PYG{n}{stream}\PYG{p}{);}
            \PYG{k+kt}{string} \PYG{n}{data} \PYG{p}{=} \PYG{n}{sr}\PYG{p}{.}\PYG{n}{ReadToEnd}\PYG{p}{();}

            \PYG{n}{SymmetricKeyAlgorithmProvider} \PYG{n}{algorithmProvider} \PYG{p}{=} \PYG{n}{SymmetricKeyAlgorithmProvider}\PYG{p}{.}\PYG{n}{OpenAlgorithm}\PYG{p}{(}\PYG{n}{SymmetricAlgorithmNames}\PYG{p}{.}\PYG{n}{AesCbcPkcs7}\PYG{p}{);}
            \PYG{n}{IBuffer} \PYG{n}{keyMaterial} \PYG{p}{=} \PYG{n}{CryptographicBuffer}\PYG{p}{.}\PYG{n}{ConvertStringToBinary}\PYG{p}{(}\PYG{n}{password}\PYG{p}{,} \PYG{n}{BinaryStringEncoding}\PYG{p}{.}\PYG{n}{Utf8}\PYG{p}{);}
            \PYG{n}{IBuffer} \PYG{n}{bufferedData} \PYG{p}{=} \PYG{n}{CryptographicBuffer}\PYG{p}{.}\PYG{n}{CreateFromByteArray}\PYG{p}{(}\PYG{n}{Encoding}\PYG{p}{.}\PYG{n}{UTF8}\PYG{p}{.}\PYG{n}{GetBytes}\PYG{p}{(}\PYG{n}{data}\PYG{p}{));}
            \PYG{n}{CryptographicKey} \PYG{n}{key} \PYG{p}{=} \PYG{n}{algorithmProvider}\PYG{p}{.}\PYG{n}{CreateSymmetricKey}\PYG{p}{(}\PYG{n}{keyMaterial}\PYG{p}{);}
            \PYG{n}{IBuffer} \PYG{n}{encryptedData} \PYG{p}{=} \PYG{n}{CryptographicEngine}\PYG{p}{.}\PYG{n}{Encrypt}\PYG{p}{(}\PYG{n}{key}\PYG{p}{,} \PYG{n}{bufferedData}\PYG{p}{,} \PYG{n}{keyMaterial}\PYG{p}{);}

            \PYG{n}{StorageFolder} \PYG{n}{folder} \PYG{p}{=} \PYG{n}{ApplicationData}\PYG{p}{.}\PYG{n}{Current}\PYG{p}{.}\PYG{n}{LocalFolder}\PYG{p}{;}
            \PYG{n}{StorageFile} \PYG{n}{file}\PYG{p}{;}
            \PYG{k}{try} \PYG{p}{\PYGZob{}}
                \PYG{n}{file} \PYG{p}{=} \PYG{k}{await} \PYG{n}{folder}\PYG{p}{.}\PYG{n}{GetFileAsync}\PYG{p}{(}\PYG{k}{this}\PYG{p}{.}\PYG{n}{fileName}\PYG{p}{);}
            \PYG{p}{\PYGZcb{}}
            \PYG{k}{catch} \PYG{p}{(}\PYG{n}{Exception} \PYG{n}{e}\PYG{p}{)} \PYG{p}{\PYGZob{}}
                \PYG{n}{file} \PYG{p}{=} \PYG{k}{await} \PYG{n}{folder}\PYG{p}{.}\PYG{n}{CreateFileAsync}\PYG{p}{(}\PYG{k}{this}\PYG{p}{.}\PYG{n}{fileName}\PYG{p}{);}
            \PYG{p}{\PYGZcb{}}
            
            \PYG{k}{await} \PYG{n}{FileIO}\PYG{p}{.}\PYG{n}{WriteBufferAsync}\PYG{p}{(}\PYG{n}{file}\PYG{p}{,} \PYG{n}{encryptedData}\PYG{p}{);}
        \PYG{p}{\PYGZcb{}}
    \PYG{p}{\PYGZcb{}}
\PYG{p}{\PYGZcb{}}
\end{Verbatim}
